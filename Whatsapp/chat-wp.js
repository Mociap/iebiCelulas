const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const fs = require('fs');
const admin = require('firebase-admin');
const path = require('path');

// Configura√ß√£o do Firestore
// Comentado temporariamente para teste sem Firebase
/*
admin.initializeApp({
    credential: admin.credential.applicationDefault(),
    databaseURL: "https://<your-database-name>.firebaseio.com" // Altere para o seu URL do Firebase
});

const db = admin.firestore();
*/

// Configura√ß√£o do cliente WhatsApp
const client = new Client({
    authStrategy: new LocalAuth({
        clientId: "igreja-chatbot-session",
        dataPath: __dirname
    }),
    puppeteer: {
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    }
});

// Evento disparado quando o QR Code √© gerado
client.on('qr', (qr) => {
    console.log('--------------------------------------------------');
    console.log('üì∏ Para conectar o chatbot, escaneie o QR Code abaixo:');
    qrcode.generate(qr, { small: true });
    console.log('--------------------------------------------------');
});

// Evento disparado quando a autentica√ß√£o falha
client.on('auth_failure', (msg) => {
    console.error('‚ùå Falha na autentica√ß√£o:', msg);
});

// Evento disparado quando o cliente √© desconectado
client.on('disconnected', (reason) => {
    console.warn('‚ö†Ô∏è Cliente desconectado:', reason);
});

// Evento principal: disparado quando o cliente est√° pronto
client.on('ready', () => {
    console.log('‚úÖ Chatbot conectado e pronto para responder mensagens!');
    console.log('ü§ñ Aguardando mensagens...');
});

// Fun√ß√£o para enviar o menu principal
function enviarMenuPrincipal(message) {
    const menuTexto = `Ol√°! üôè Sou Ester, sua atendente vitual IEBI.\n\nDigite o n√∫mero das op√ß√µes abaixo:\n\n1Ô∏è‚É£ Baixar Estudo de C√©lula\n2Ô∏è‚É£ Reservar uma Sala\n\nDigite apenas o n√∫mero da op√ß√£o desejada.`;
    message.reply(menuTexto);
}

// Fun√ß√£o para enviar o arquivo EstudoCelula.pdf
async function enviarEstudoCelula(message) {
    try {
        const arquivoPath = path.join(__dirname, '../assets/EstudoCelula/EstudoCelula.pdf');
        
        // Verificar se o arquivo existe
        if (!fs.existsSync(arquivoPath)) {
            message.reply('‚ùå Desculpe, o arquivo do estudo de c√©lula n√£o foi encontrado.');
            return;
        }
        
        // Enviar mensagem de texto primeiro
        await message.reply('üìö Aqui est√° o estudo de c√©lula que voc√™ solicitou:');
        
        // Enviar o arquivo PDF
        const media = require('whatsapp-web.js').MessageMedia.fromFilePath(arquivoPath);
        await client.sendMessage(message.from, media);
        
    } catch (error) {
        console.error('Erro ao enviar estudo de c√©lula:', error);
        message.reply('‚ùå Houve um erro ao enviar o arquivo. Tente novamente mais tarde.');
    }
}

// Fun√ß√£o para coletar dados e armazenar a reserva de sala no Firestore
async function reservarSala(message) {
    message.reply('üìÖ Vamos fazer sua reserva!');

    // Coletando informa√ß√µes
    const respostas = {};

    // Perguntas para o usu√°rio
    message.reply('Qual √© o seu nome?');
    client.on('message', async (msg) => {
        if (msg.from !== message.from || !respostas.nome) {
            respostas.nome = msg.body.trim();
            message.reply('Qual √© o per√≠odo de utiliza√ß√£o da Sala?');
        } else if (respostas.nome && !respostas.sala) {
            respostas.sala = msg.body.trim();
            message.reply('Qual ser√° a data de utiliza√ß√£o? (Formato: dd/mm/aaaa)');
        } else if (respostas.sala && !respostas.data) {
            respostas.data = msg.body.trim();
            message.reply('Qual √© a Hora inicial do evento? (Formato: hh:mm)');
        } else if (respostas.data && !respostas.hora) {
            respostas.hora = msg.body.trim();
            message.reply('Por quanto tempo pretende usar? (Formato: hh:mm)');
        } else if (respostas.hora && !respostas.periodo) {
            respostas.periodo = msg.body.trim();
            message.reply('Qual √© a finalidade da reserva?');
        } else if (respostas.periodo && !respostas.finalidade) {
            respostas.finalidade = msg.body.trim();
            
            // Armazenando no Firestore (comentado temporariamente)
            /*
            try {
                await db.collection('secretaria').doc('sala').collection('agSala').add({
                    nome: respostas.nome,
                    sala: respostas.sala,
                    data: respostas.data,
                    hora: respostas.hora,
                    periodo: respostas.periodo,
                    finalidade: respostas.finalidade
                });

                message.reply('‚úÖ Sua reserva foi realizada com sucesso!');
            } catch (error) {
                console.error('Erro ao salvar reserva:', error);
                message.reply('‚ùå Houve um erro ao salvar sua reserva. Tente novamente mais tarde.');
            }
            */
            
            // Simula√ß√£o de sucesso para teste
            console.log('Dados da reserva:', respostas);
            message.reply('‚úÖ Sua reserva foi registrada! (modo teste - Firebase desabilitado)');
        }
    });
}

// Evento disparado quando uma mensagem √© recebida
client.on('message', async (message) => {
    // Ignora mensagens enviadas pelo pr√≥prio bot
    if (message.fromMe) return;
    
    // Ignora mensagens de grupos
    if (message.from.includes('@g.us')) return;
    
    const mensagemTexto = message.body.trim();
    
    console.log(`üì® Mensagem recebida de ${message.from}: "${mensagemTexto}"`);
    
    try {
        // Verifica se √© uma op√ß√£o do menu
        switch (mensagemTexto) {
            case '1':
                console.log('üîÑ Enviando Estudo de C√©lula...');
                await enviarEstudoCelula(message);
                break;
                
            case '2':
                console.log('üîÑ Iniciando reserva de sala...');
                reservarSala(message);
                break;
                
            default:
                console.log('üîÑ Enviando menu principal...');
                enviarMenuPrincipal(message);
                break;
        }
        
        console.log('‚úÖ Resposta enviada com sucesso!');
        
    } catch (error) {
        console.error('‚ùå Erro ao processar mensagem:', error);
        message.reply('Desculpe, ocorreu um erro. Tente novamente em alguns instantes.');
    }
});

// Inicia o cliente
console.log('üöÄ Iniciando o chatbot da igreja...');
client.initialize();

// Tratamento de erros n√£o capturados
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Erro n√£o tratado:', reason);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Exce√ß√£o n√£o capturada:', error);
    process.exit(1);
});
